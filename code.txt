const startTimestamp = Date.now();
const endTimestamp = startTimestamp + displayTime * 1000;

// Update display every second
intervalRef.current = setInterval(() => {
    const remaining = Math.max(0, Math.floor((endTimestamp - Date.now()) / 1000));
    setDisplayTime(remaining);
}, 1000);

// Auto-stop after exact time
timeoutRef.current = setTimeout(() => {
    setStarted(false); // auto-stop
    clearInterval(intervalRef.current);
    intervalRef.current = null;
}, displayTime * 1000);


{
  printWidth: 120, // max 120 chars in line, code is easy to read
  useTabs: false, // use spaces instead of tabs
  tabWidth: 2, // "visual width" of of the "tab"
  trailingComma: 'es5', // add trailing commas in objects, arrays, etc.
  semi: true, // add ; when needed
  singleQuote: true, // '' for stings instead of ""
  bracketSpacing: true, // import { some } ... instead of import {some} ...
  arrowParens: 'always', // braces even for single param in arrow functions (a) => { }
  jsxSingleQuote: false, // "" for react props, like in html
  bracketSameLine: false, // pretty JSX
  endOfLine: 'lf', // 'lf' for linux, 'crlf' for windows, we need to use 'lf' for git
}